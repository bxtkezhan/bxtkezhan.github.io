<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bxtkezhan@kk</title>
    <link>http://bxtkezhan.xyz/</link>
    <description>Recent content on bxtkezhan@kk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 04 Apr 2021 19:04:02 +0800</lastBuildDate>
    
	<atom:link href="http://bxtkezhan.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>初学篇・面向对象&amp;数据结构</title>
      <link>http://bxtkezhan.xyz/post/014-object-struct/</link>
      <pubDate>Sun, 04 Apr 2021 19:04:02 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/014-object-struct/</guid>
      <description>返回教程主页
上篇 初学篇・函数的定义与调用
在Python当中，我们常常使用到的基本数据类型有整型int、浮点型float、字符串类型str……，以及结构类型列表list、元祖tuple，事实上我们也可以自己来定义类型，这将涉及到Python的面向对象编程。
类的定义与实例化 我们可以借助关键字class定义我们自己的数据结构类型:
class &amp;lt;类名称&amp;gt;: &amp;lt;类成员&amp;gt; 在完成类的定义后我们可以借助类名称来实例化我们的类型，即产生一个该类型的对象:
class Calc: pass # pass 用于站位，并无具体操作 calc = Calc() print(type(calc)) 我们可以在类中定义一些变量作为该类的成员变量，并且使用点.进行调取:
class Number: one = 1 two = 2 pi = 3.14159 number = Number() print(number.one, number.two, number.pi) 我们也可以在类中定义一些函数作为该类的成员方法，并使用点.进行调用:
class Computer: def add(self, a, b): return a + b def sub(self, a, b): return a - b computer = Computer() print(computer.add(100, 100)) print(computer.sub(100, 100)) 成员方法的第一个参数代表该对象本身，通常取名self，调用某对象的成员方法时该参数无须设定。借助这个参数，我们可以在某个成员方法中操作其它该类的成员变量或成员方法:
class Man: name = &amp;#34;kk&amp;#34; def say(self): print(&amp;#34;I&amp;#39;m&amp;#34;, self.</description>
    </item>
    
    <item>
      <title>初学篇・函数的定义与调用</title>
      <link>http://bxtkezhan.xyz/post/013-function/</link>
      <pubDate>Sun, 04 Apr 2021 15:54:47 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/013-function/</guid>
      <description>函数是指可重复使用的程序片段。被用来为某个代码块赋予名字，通过这一特殊的名字可以在程序的任何地方来运行代码块，并可重复任何次数。这就是所谓的调用函数。我们已经使用过了许多内置的函数，例如: &lt;code&gt;print&lt;/code&gt;、&lt;code&gt;len&lt;/code&gt;和&lt;code&gt;range&lt;/code&gt;。</description>
    </item>
    
    <item>
      <title>初学篇・循环控制语句</title>
      <link>http://bxtkezhan.xyz/post/012-loop/</link>
      <pubDate>Sun, 04 Apr 2021 14:07:06 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/012-loop/</guid>
      <description>在Python中可以通过&lt;code&gt;while&lt;/code&gt;与&lt;code&gt;for&lt;/code&gt;两种循环语句来处理循环问题。</description>
    </item>
    
    <item>
      <title>初学篇・条件控制语句</title>
      <link>http://bxtkezhan.xyz/post/011-if/</link>
      <pubDate>Sat, 03 Apr 2021 22:55:25 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/011-if/</guid>
      <description>&lt;code&gt;if&lt;/code&gt;语句用以根据条件判断如何执行代码: 如果条件为真&lt;code&gt;True&lt;/code&gt;，我们将运行一块语句(称作 if-block 或 if 块)，否则我们将运行另一块语句(称作 else-block 或 else 块)。其中&lt;code&gt;else&lt;/code&gt;从句是可选的。</description>
    </item>
    
    <item>
      <title>初学篇・逻辑运算&amp;比较运算</title>
      <link>http://bxtkezhan.xyz/post/010-logic-compare/</link>
      <pubDate>Sat, 03 Apr 2021 22:05:14 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/010-logic-compare/</guid>
      <description>Python当中可以用&lt;code&gt;and&lt;/code&gt;、&lt;code&gt;or&lt;/code&gt;、&lt;code&gt;not&lt;/code&gt;关键字来进行与、或、非逻辑运算，而&lt;code&gt;True&lt;/code&gt;、&lt;code&gt;False&lt;/code&gt;则用于表示布尔值中的真与假；Python当中可以使用&lt;code&gt;&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;gt;=&lt;/code&gt;、&lt;code&gt;==&lt;/code&gt;、&lt;code&gt;&amp;lt;=&lt;/code&gt;、&lt;code&gt;&amp;lt;&lt;/code&gt;、&lt;code&gt;!=&lt;/code&gt;符号来进行值的比较。</description>
    </item>
    
    <item>
      <title>初学篇・Python计算器</title>
      <link>http://bxtkezhan.xyz/post/009-calc/</link>
      <pubDate>Sat, 03 Apr 2021 20:43:12 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/009-calc/</guid>
      <description>我们可以使用Python来进行一系列的计算器操作，如果足够熟悉Python，那么它将胜过许多高级计算器，甚至某些高级计算器就内置了Python，例如: Casio 卡西欧 FX-9860 GIII 图形计算器。</description>
    </item>
    
    <item>
      <title>初学篇・第一步“你好世界”</title>
      <link>http://bxtkezhan.xyz/post/008-first/</link>
      <pubDate>Sat, 03 Apr 2021 19:25:30 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/008-first/</guid>
      <description>Python是一种广泛使用的直译式、进阶和通用的程式语言。Python支援多种程式设计范式，包括函数式、指令式、结构化、物件导向和反射式程式。它拥有动态型别系统和垃圾回收功能，能够自动管理记忆体使用，并且其本身拥有一个巨大而广泛的标准库。</description>
    </item>
    
    <item>
      <title>黑客之路・编译原理</title>
      <link>http://bxtkezhan.xyz/post/tutorial_003/</link>
      <pubDate>Wed, 31 Mar 2021 23:21:44 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/tutorial_003/</guid>
      <description>正在制作中&amp;hellip;</description>
    </item>
    
    <item>
      <title>黑客之路・C/C&#43;&#43;篇</title>
      <link>http://bxtkezhan.xyz/post/tutorial_002/</link>
      <pubDate>Wed, 31 Mar 2021 23:21:42 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/tutorial_002/</guid>
      <description>正在制作中&amp;hellip;</description>
    </item>
    
    <item>
      <title>黑客之路・Python篇</title>
      <link>http://bxtkezhan.xyz/post/tutorial_001/</link>
      <pubDate>Wed, 31 Mar 2021 23:21:39 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/tutorial_001/</guid>
      <description>围绕Python程序语言展开的一系列或有趣或实用的技术，欢迎喜欢计算机，软硬件，Python编程技术的朋友参与学习。</description>
    </item>
    
    <item>
      <title>支持While语句</title>
      <link>http://bxtkezhan.xyz/post/007-while/</link>
      <pubDate>Wed, 31 Mar 2021 14:17:49 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/007-while/</guid>
      <description>下面我们来让程序语言支持While语句，这会使得&lt;strong&gt;bkcalclang&lt;/strong&gt;能够解决一些依赖循环结构处理的问题。</description>
    </item>
    
    <item>
      <title>推荐几本Python书籍【免费下载】</title>
      <link>http://bxtkezhan.xyz/post/books_001/</link>
      <pubDate>Mon, 29 Mar 2021 20:26:01 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/books_001/</guid>
      <description>根据投票结果，Python为票数最多的选项，那么这里推荐几本Python书籍。</description>
    </item>
    
    <item>
      <title>支持If语句</title>
      <link>http://bxtkezhan.xyz/post/006-if/</link>
      <pubDate>Mon, 29 Mar 2021 16:42:47 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/006-if/</guid>
      <description>下面我们来让程序语言支持If语句，这会使得&lt;strong&gt;bkcalclang&lt;/strong&gt;能够处理更加复杂的问题。</description>
    </item>
    
    <item>
      <title>使程序语言支持变量</title>
      <link>http://bxtkezhan.xyz/post/005-assign/</link>
      <pubDate>Fri, 26 Mar 2021 14:49:43 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/005-assign/</guid>
      <description>下面我们来让计算器程序支持变量的使用，使得程序可以设置和获取变量的值。从现在开始我将不掩藏我们要实现的是一个程序语言，因为出自计算器所以命名为 &lt;strong&gt;bkcalclang&lt;/strong&gt;</description>
    </item>
    
    <item>
      <title>使计算器支持语句块</title>
      <link>http://bxtkezhan.xyz/post/004-block/</link>
      <pubDate>Wed, 24 Mar 2021 18:45:28 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/004-block/</guid>
      <description>下面我们来为计算器程序增加语句块功能，使得程序可以做批量运算，类似于程序语言中的代码块。</description>
    </item>
    
    <item>
      <title>递归向下算法实现Calc</title>
      <link>http://bxtkezhan.xyz/post/003-calc/</link>
      <pubDate>Wed, 17 Mar 2021 21:26:32 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/003-calc/</guid>
      <description>利用递归向下算法结合我们的&lt;code&gt;BKLexer&lt;/code&gt;实现支持四则运算与括号优先级的计算器程序。</description>
    </item>
    
    <item>
      <title>使用BKLexer进行词法分析</title>
      <link>http://bxtkezhan.xyz/post/002-bklexer/</link>
      <pubDate>Sat, 13 Mar 2021 22:55:41 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/002-bklexer/</guid>
      <description>前几天我已经封装好了词法分析器并命名&lt;code&gt;BKLexer&lt;/code&gt;，当前&lt;code&gt;BKLexer&lt;/code&gt;分别支持Go/C++/Python。</description>
    </item>
    
    <item>
      <title>词法分析器</title>
      <link>http://bxtkezhan.xyz/post/001-lexer/</link>
      <pubDate>Sat, 06 Mar 2021 21:26:02 +0800</pubDate>
      
      <guid>http://bxtkezhan.xyz/post/001-lexer/</guid>
      <description>维基百科介绍：词法分析是计算机科学中将字符序列转换为标记序列的过程。进行词法分析的程序或者函数叫作词法分析器。️</description>
    </item>
    
  </channel>
</rss>