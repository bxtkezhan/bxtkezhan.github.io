<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on bxtkezhan@kk</title><link>https://bxtkezhan.github.io/posts/</link><description>Recent content in Posts on bxtkezhan@kk</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 12 Jul 2022 16:56:19 +0200</lastBuildDate><atom:link href="https://bxtkezhan.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>语音识别・MFCC特征</title><link>https://bxtkezhan.github.io/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%ABmfcc%E7%89%B9%E5%BE%81/</link><pubDate>Mon, 28 Aug 2023 23:43:01 +0800</pubDate><guid>https://bxtkezhan.github.io/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%ABmfcc%E7%89%B9%E5%BE%81/</guid><description>做语音识别前常常需要先对音频文件做预编码处理，然后将处理后的数据送入模型做进一步的推理或者训练。</description></item><item><title>使用计算机视觉技术进行PCB图像连接线检测</title><link>https://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%8A%80%E6%9C%AF%E8%BF%9B%E8%A1%8Cpcb%E5%9B%BE%E5%83%8F%E8%BF%9E%E6%8E%A5%E7%BA%BF%E6%A3%80%E6%B5%8B/</link><pubDate>Mon, 12 Jun 2023 22:31:45 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%8A%80%E6%9C%AF%E8%BF%9B%E8%A1%8Cpcb%E5%9B%BE%E5%83%8F%E8%BF%9E%E6%8E%A5%E7%BA%BF%E6%A3%80%E6%B5%8B/</guid><description>我们会使用 matplotlib 进行绘图，并使用 numpy 处理数组相关的数值计算，以及使用 opencv 提供的计算机视觉工具，请确保工作环境可以正确引入并使用它们。</description></item><item><title>使用计算机视觉技术进行PCB图像焊点检测</title><link>https://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%8A%80%E6%9C%AF%E8%BF%9B%E8%A1%8Cpcb%E5%9B%BE%E5%83%8F%E7%84%8A%E7%82%B9%E6%A3%80%E6%B5%8B/</link><pubDate>Wed, 10 May 2023 02:20:46 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%8A%80%E6%9C%AF%E8%BF%9B%E8%A1%8Cpcb%E5%9B%BE%E5%83%8F%E7%84%8A%E7%82%B9%E6%A3%80%E6%B5%8B/</guid><description>我们会使用 matplotlib 进行绘图，并使用 numpy 处理数组相关的数值计算，以及使用 opencv 提供的计算机视觉工具，请确保工作环境可以正确引入并使用它们。</description></item><item><title>Godot开发・3D动作</title><link>https://bxtkezhan.github.io/godot%E5%BC%80%E5%8F%913d%E5%8A%A8%E4%BD%9C/</link><pubDate>Sun, 23 Apr 2023 23:18:36 +0800</pubDate><guid>https://bxtkezhan.github.io/godot%E5%BC%80%E5%8F%913d%E5%8A%A8%E4%BD%9C/</guid><description>今天我们来学习使用Godot 3D模式下的物体运动操作，我们主要会使用到RigidBody3D「刚体」, StaticBody3D「静态」, Camera3D「相机」, DirectionalLight3D「定向光源」这四个节点。当然，除了这几个主要的节点，我们还会使用到处理碰撞检测的CollisionShape3D节点，Godot预置的3D模型，立方体CSGBox3D节点与圆柱体CSGCylinder3D节点。</description></item><item><title>Godot开发・节点与场景</title><link>https://bxtkezhan.github.io/godot%E5%BC%80%E5%8F%91%E8%8A%82%E7%82%B9%E4%B8%8E%E5%9C%BA%E6%99%AF/</link><pubDate>Tue, 04 Apr 2023 21:37:27 +0800</pubDate><guid>https://bxtkezhan.github.io/godot%E5%BC%80%E5%8F%91%E8%8A%82%E7%82%B9%E4%B8%8E%E5%9C%BA%E6%99%AF/</guid><description>在使用Godot开发项目时，我们会用到节点「Node」来构建和处理我们需要的场景、角色、灯光、相机、播放器等物件。另外，我们可以在不同场景「Scene」中布置不同的节点结构来实现不同的游戏场景。</description></item><item><title>Godot开发・安装Godot4</title><link>https://bxtkezhan.github.io/godot%E5%BC%80%E5%8F%91%E5%AE%89%E8%A3%85godot4/</link><pubDate>Wed, 29 Mar 2023 22:47:50 +0800</pubDate><guid>https://bxtkezhan.github.io/godot%E5%BC%80%E5%8F%91%E5%AE%89%E8%A3%85godot4/</guid><description>前不久我在浏览几个游戏开发引擎的时候发现了这些支持3D游戏开发的引擎除了有提供游戏开发功能外还专门标识了可以用于工业仿真，例如：机械臂、车间流水线。正好我其实也对这些东西比较感兴趣，所以我决定尝试使用Godot游戏引擎来实现一个机械仿真工具，便于我之后研究自己的3D打印机、CNC、机械臂。</description></item><item><title>图像生成模型基础・自动编码器</title><link>https://bxtkezhan.github.io/%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E8%87%AA%E5%8A%A8%E7%BC%96%E7%A0%81%E5%99%A8/</link><pubDate>Mon, 06 Mar 2023 23:05:15 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E8%87%AA%E5%8A%A8%E7%BC%96%E7%A0%81%E5%99%A8/</guid><description>今天我们使用Python编程语言和PyTorch深度学习库实现一个用于图像有损压缩的自动编码器模型，针对MNIST数据集进行讲解。</description></item><item><title>创客一点灵・绘制完整挂钩</title><link>https://bxtkezhan.github.io/%E5%88%9B%E5%AE%A2%E4%B8%80%E7%82%B9%E7%81%B5%E7%BB%98%E5%88%B6%E5%AE%8C%E6%95%B4%E6%8C%82%E9%92%A9/</link><pubDate>Wed, 11 Jan 2023 11:30:47 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9B%E5%AE%A2%E4%B8%80%E7%82%B9%E7%81%B5%E7%BB%98%E5%88%B6%E5%AE%8C%E6%95%B4%E6%8C%82%E9%92%A9/</guid><description>我们已经学习过了挂钩主体的3D绘制，今天我们就来完成一个完整的挂钩绘制。</description></item><item><title>创客一点灵・绘制钩子</title><link>https://bxtkezhan.github.io/%E5%88%9B%E5%AE%A2%E4%B8%80%E7%82%B9%E7%81%B5%E7%BB%98%E5%88%B6%E9%92%A9%E5%AD%90/</link><pubDate>Fri, 09 Dec 2022 01:43:56 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9B%E5%AE%A2%E4%B8%80%E7%82%B9%E7%81%B5%E7%BB%98%E5%88%B6%E9%92%A9%E5%AD%90/</guid><description>今天我们来完成挂钩中钩子部分的绘制，并且今天的操作需要基于上一节中学习到的基础知识，建议没有看过上一节内容的朋友先去到上一节进行了解，然后再来学习今天的操作。</description></item><item><title>盘点一下小弟用得比较多的编程语言</title><link>https://bxtkezhan.github.io/%E7%9B%98%E7%82%B9%E4%B8%80%E4%B8%8B%E5%B0%8F%E5%BC%9F%E7%94%A8%E5%BE%97%E6%AF%94%E8%BE%83%E5%A4%9A%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><pubDate>Tue, 29 Nov 2022 15:44:14 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%9B%98%E7%82%B9%E4%B8%80%E4%B8%8B%E5%B0%8F%E5%BC%9F%E7%94%A8%E5%BE%97%E6%AF%94%E8%BE%83%E5%A4%9A%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</guid><description>盘点一下小弟用得比较多的编程语言</description></item><item><title>创客一点灵・草图</title><link>https://bxtkezhan.github.io/%E5%88%9B%E5%AE%A2%E4%B8%80%E7%82%B9%E7%81%B5%E8%8D%89%E5%9B%BE/</link><pubDate>Sat, 26 Nov 2022 19:27:39 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9B%E5%AE%A2%E4%B8%80%E7%82%B9%E7%81%B5%E8%8D%89%E5%9B%BE/</guid><description>我们使用FreeCAD设计模型时会用到FreeCAD中的草图（sketch），一般来说，我们要设计某个三维模型部件会需要先绘制该部件的二维平面草图，然后按照需求将草图转换为三维空间中的物体，接下来再在这个三维物体的基础上绘制二维平面的草图然后对这个三维物体进行修改，重复这个步骤直到模型设计完毕。具体的操作细节我们会在之后的章节中学习，现在我们来学习一下绘制草图并生成三维物体的这个最基础的操作。</description></item><item><title>创客一点灵・安装FreeCAD</title><link>https://bxtkezhan.github.io/%E5%88%9B%E5%AE%A2%E4%B8%80%E7%82%B9%E7%81%B5%E5%AE%89%E8%A3%85freecad/</link><pubDate>Wed, 09 Nov 2022 00:31:52 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9B%E5%AE%A2%E4%B8%80%E7%82%B9%E7%81%B5%E5%AE%89%E8%A3%85freecad/</guid><description>“&lt;strong>FreeCAD&lt;/strong> 是一款通用参数化三维计算机辅助设计建模器和支持有限元方法的建筑信息建模软件应用程序。”我们将使用它来进行三维模型的绘制。</description></item><item><title>创客一点灵・从挂钩开始的学习</title><link>https://bxtkezhan.github.io/%E5%88%9B%E5%AE%A2%E4%B8%80%E7%82%B9%E7%81%B5%E4%BB%8E%E6%8C%82%E9%92%A9%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%A6%E4%B9%A0/</link><pubDate>Sat, 29 Oct 2022 23:05:31 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9B%E5%AE%A2%E4%B8%80%E7%82%B9%E7%81%B5%E4%BB%8E%E6%8C%82%E9%92%A9%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AD%A6%E4%B9%A0/</guid><description>为了贯彻宅的信念，我们需要能够自己在家「生产」一些实用的工具。而要实现在家生产，我们就需要掌握一些相关领域的知识与技能。</description></item><item><title>人工神经网络・批量标准化</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%89%B9%E9%87%8F%E6%A0%87%E5%87%86%E5%8C%96/</link><pubDate>Mon, 03 Oct 2022 19:48:53 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%89%B9%E9%87%8F%E6%A0%87%E5%87%86%E5%8C%96/</guid><description>在数据处理中常常使用标准化技术对数据进行处理，一般来说标准化处理有利于提升模型对数据的拟合效果。我们也可以使用标准化技术对神经网络模型进行升级。</description></item><item><title>人工神经网络・卷积神经网络</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</link><pubDate>Mon, 03 Oct 2022 19:48:23 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</guid><description>我们之前构建的神经网络都是靠普通的线性网络层Linear进行拟合，然而在处理图像数据的时候我们其实可以用效果更好的卷积网络层。将卷积网络层加入到我们的神经网络就可以在一定程度上提升模型的准确率，而由于此种神经网络的结构中包含卷积网络层，因此，也常被叫做卷积神经网络。</description></item><item><title>人工神经网络・ReLU激活函数</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Crelu%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 03 Oct 2022 19:47:10 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Crelu%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</guid><description>上一节中我们实现了一个多层感知器神经网络用来处理图像分类问题。然而那个神经网络模型还是比较「稚嫩」，我们可以对其稍加修改，实现一定程度上的提升。</description></item><item><title>人工神经网络・多层感知器</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8/</link><pubDate>Sun, 02 Oct 2022 22:29:29 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8/</guid><description>之前我们都是采用手工构造的数据来进行学习，这一次我们将处理一个真实场景的问题——手写数字识别。</description></item><item><title>人工神经网络・Softmax多分类</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Csoftmax%E5%A4%9A%E5%88%86%E7%B1%BB/</link><pubDate>Thu, 29 Sep 2022 13:48:49 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Csoftmax%E5%A4%9A%E5%88%86%E7%B1%BB/</guid><description>逻辑回归常用于处理二分类问题的，虽然也可以通过〚联合〛的方式处理多分类问题「有超过两个以上的类别」但这样比较麻烦。在处理多分类问题的时候我们可以使用softmax替代逻辑回归里的sigmoid激活函数，这样可以实现多分类操作。</description></item><item><title>人工神经网络・逻辑回归</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</link><pubDate>Mon, 26 Sep 2022 15:02:00 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</guid><description>先前我们在最小二乘拟合那一节中了解到如何使用最小二乘的方法拟合多项式方程，那么今天我们再来学习一种「拟合」方程的方法——逻辑回归。</description></item><item><title>人工神经网络・操作环境准备</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Fri, 23 Sep 2022 23:05:46 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>本章介绍一些人工神经网络开发的技术，下面列出本章节会使用的一些依赖库。</description></item><item><title>数据分析・聚类分析</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90/</link><pubDate>Tue, 20 Sep 2022 18:59:48 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90/</guid><description>上一节中介绍了最小二乘法，本节将介绍另一个数据分析方法——聚类分析。该方法常用于处理具备几何特征关系的数据点，我们以最基础的k均值聚类为例进行说明。</description></item><item><title>数据分析・最小二乘拟合</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%8B%9F%E5%90%88/</link><pubDate>Tue, 20 Sep 2022 18:59:05 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%8B%9F%E5%90%88/</guid><description>下面我们使用最小二乘拟合的方法去拟合一系列的数据点，该操作常用于在一组数据点中窥见变化趋势。</description></item><item><title>JIT・Lightning 示例「printf」</title><link>https://bxtkezhan.github.io/jitlightning-%E7%A4%BA%E4%BE%8Bprintf/</link><pubDate>Mon, 12 Sep 2022 19:50:38 +0800</pubDate><guid>https://bxtkezhan.github.io/jitlightning-%E7%A4%BA%E4%BE%8Bprintf/</guid><description>在了解lightning的基本使用方式后，我们再来了解如何在lightning中调用c函数。</description></item><item><title>JIT・Lightning 示例「incr」</title><link>https://bxtkezhan.github.io/jitlightning-%E7%A4%BA%E4%BE%8Bincr/</link><pubDate>Tue, 06 Sep 2022 15:14:11 +0800</pubDate><guid>https://bxtkezhan.github.io/jitlightning-%E7%A4%BA%E4%BE%8Bincr/</guid><description>在上一篇文章中我们简单地介绍了一下GNU/Lightning，现在我们来讲解上一篇文章中测试用的示例。</description></item><item><title>JIT・GNU/Lightning</title><link>https://bxtkezhan.github.io/jitgnu/lightning/</link><pubDate>Thu, 01 Sep 2022 15:35:50 +0800</pubDate><guid>https://bxtkezhan.github.io/jitgnu/lightning/</guid><description>在之前的文章中我们了解了一点基础的汇编语法以及与C程序的混用技巧，现在我们进一步来学习使用及时编译技巧「JIT」。</description></item><item><title>Arberia FAQs</title><link>https://bxtkezhan.github.io/arberia-faqs/</link><pubDate>Wed, 27 Jul 2022 12:07:11 +0200</pubDate><guid>https://bxtkezhan.github.io/arberia-faqs/</guid><description/></item><item><title>Arberia Features</title><link>https://bxtkezhan.github.io/arberia-features/</link><pubDate>Wed, 27 Jul 2022 11:27:38 +0200</pubDate><guid>https://bxtkezhan.github.io/arberia-features/</guid><description>Intro We&amp;rsquo;ll be using toml format for all examples down below, I recommend using toml as it is easier to read.
You can find any YML to TOML converters if necessary.
Assets (js/css) The following is enabled by default
minification - makes the assets size smallest as possible. bundling - bundles all the styles in one single asset fingerprint/intergity check. Search Page PaperMod uses flexsearch.js for search functionality
Add the following to site config, config.</description></item><item><title>Arberia Installation | Update</title><link>https://bxtkezhan.github.io/arberia-installation-update/</link><pubDate>Wed, 27 Jul 2022 10:53:18 +0200</pubDate><guid>https://bxtkezhan.github.io/arberia-installation-update/</guid><description>Intro We&amp;rsquo;ll be using yml/yaml format for all examples down below, I recommend using yml over toml as it is easier to read. You can find any YML to TOML converters if necessary. Guide Follow Quick Start guide to setup and create a new site.
Note: Use -f to select yml format
hugo new site &amp;lt;name of site&amp;gt; -f yml
Make sure you install latest version of hugo(&amp;gt;=0.101.0).
After you have created a new site, at Step 3 follow the steps:</description></item><item><title>Build in Shortcodes</title><link>https://bxtkezhan.github.io/build-in-shortcodes/</link><pubDate>Fri, 22 Jul 2022 08:53:46 +0200</pubDate><guid>https://bxtkezhan.github.io/build-in-shortcodes/</guid><description>Hugo provides multiple built-in shortcodes for author convenience and to keep your markdown content clean.
Hugo uses Markdown for its simple content format. However, there are a lot of things that Markdown doesn’t support well. You could use pure HTML to expand possibilities.
But this happens to be a bad idea. Everyone uses Markdown because it’s pure and simple to read even non-rendered. You should avoid HTML to keep it as simple as possible.</description></item><item><title>Post with Cover Image</title><link>https://bxtkezhan.github.io/post-with-cover-image/</link><pubDate>Wed, 06 Jul 2022 21:08:01 +0200</pubDate><guid>https://bxtkezhan.github.io/post-with-cover-image/</guid><description>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus magna diam, interdum varius varius ac, vehicula et velit. Quisque ac nisi fringilla, fermentum sem in, dignissim lorem. Donec nibh velit, convallis at dolor non, laoreet accumsan lectus. Quisque eget efficitur nunc. Vivamus at lobortis felis. Nunc sed nunc non arcu laoreet ullamcorper sit amet eget ex. Quisque sit amet turpis at sem efficitur sodales sed id leo. Vivamus scelerisque cursus libero quis iaculis.</description></item><item><title>Code Sample</title><link>https://bxtkezhan.github.io/code-sample/</link><pubDate>Fri, 24 Jun 2022 18:28:32 +0200</pubDate><guid>https://bxtkezhan.github.io/code-sample/</guid><description>&lt;p>The following are two code samples using syntax highlighting.&lt;/p></description></item><item><title>数据分析・矩阵操作</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 19 May 2022 19:26:33 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/</guid><description>由于本章的后部分内容需要使用到一点关于矩阵运算的基础操作，所以我们在这里先了解一下。</description></item><item><title>Extended Shortcode</title><link>https://bxtkezhan.github.io/extended-shortcode/</link><pubDate>Sun, 01 May 2022 18:19:27 +0200</pubDate><guid>https://bxtkezhan.github.io/extended-shortcode/</guid><description>Arberia Theme provides multiple built-in shortcodes for author convenience and to keep your markdown content clean. To expand your possibility this is an example list of all provided shortcodes.
Alert Shortcode to inset varius alert on markdown post use this code:
{{&amp;lt; alert-info &amp;#34;[**Click here to get an example of info alert**](https://antedoro.it/) followed in this tutorial.&amp;#34;&amp;gt;}} {{&amp;lt; alert-success &amp;#34;[**Click here to get an example of info alert**](https://antedoro.it/) followed in this tutorial.</description></item><item><title>项目・Smartfile</title><link>https://bxtkezhan.github.io/%E9%A1%B9%E7%9B%AEsmartfile/</link><pubDate>Sun, 13 Feb 2022 16:04:08 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%A1%B9%E7%9B%AEsmartfile/</guid><description>smartfile文件可以帮助我们将网络上的资源转换成桌面快捷方式，类似于创建了网络版本的应用程序；还能将一些日常操作整理成快捷方式，提升用户使用电脑的效率。</description></item><item><title>数据分析・资料的载入与导出</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E8%B5%84%E6%96%99%E7%9A%84%E8%BD%BD%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA/</link><pubDate>Tue, 18 Jan 2022 00:29:47 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E8%B5%84%E6%96%99%E7%9A%84%E8%BD%BD%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA/</guid><description>现在我们来了解如何在Python中进行数据的载入和导出操作，我们以Json和CSV这两个常见的文本数据类型进行讲解。</description></item><item><title>The Beginning・Python Calculator</title><link>https://bxtkezhan.github.io/the-beginningpython-calculator/</link><pubDate>Sat, 15 Jan 2022 05:00:47 +0800</pubDate><guid>https://bxtkezhan.github.io/the-beginningpython-calculator/</guid><description>We can use python to do some calc operations like a calculator. It will be power than many calculators if you know enough python. And some calculators have embedded python. Casio FX 9860 GIII is an example.</description></item><item><title>数据分析・数据可视化</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</link><pubDate>Wed, 08 Dec 2021 00:43:29 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</guid><description>Matplotlib是一个非常有用的Python数据绘图库，借助Matplotlib可以很方便的将数据可视化。</description></item><item><title>数据分析・多维数组的数值操作</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B0%E5%80%BC%E6%93%8D%E4%BD%9C/</link><pubDate>Wed, 17 Nov 2021 00:25:21 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B0%E5%80%BC%E6%93%8D%E4%BD%9C/</guid><description>数组结构可以快速有序的处理一系列的数据。因此，在处理数据的时候常常要用到数组或多维数组，一个常用的例子就是在处理Excel表格数据的时候将其表示为二维数组。</description></item><item><title>数据分析・操作环境准备</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Mon, 15 Nov 2021 17:05:11 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>本章介绍一些Python数据分析的入门知识，下面列出本章节会使用的一些依赖库。</description></item><item><title>影像处理・视频编辑</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E8%A7%86%E9%A2%91%E7%BC%96%E8%BE%91/</link><pubDate>Fri, 05 Nov 2021 13:47:38 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E8%A7%86%E9%A2%91%E7%BC%96%E8%BE%91/</guid><description>关于影像处理除了进行类似计算机视觉与数字图像处理的操作，我们还可以像一些非线性编辑软件一样对视频材料进行剪辑处理，以及添加专场、字幕等操作。通常此类操作都会使用到ffmpeg这款开源的数字媒体处理工具，而它有一个叫做moviepy的接口，可以让我们轻松上手。</description></item><item><title>汇编语言「Linux/x86-64」・调用C程序</title><link>https://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E8%B0%83%E7%94%A8c%E7%A8%8B%E5%BA%8F/</link><pubDate>Sun, 17 Oct 2021 15:35:44 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E8%B0%83%E7%94%A8c%E7%A8%8B%E5%BA%8F/</guid><description>在有操作系统的情况下使用纯汇编开发程序的情况非常少，即便是不得不用汇编的场景也常常是使用汇编结合高级编程语言的方式进行开发。下面我们来了解一下如何在汇编之中调用C程序以及在C程序中调用汇编。</description></item><item><title>影像处理・人脸识别</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</link><pubDate>Mon, 04 Oct 2021 21:37:28 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</guid><description>想要使用Python实现人脸识别也不是一件难事，使用&lt;code>face_recognition&lt;/code>人脸识别开发库可以快速上手。</description></item><item><title>影像处理・目标检测</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</link><pubDate>Sun, 03 Oct 2021 20:37:53 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</guid><description>在成功调用摄像头并获取视频内容后，我们可以对视频内容进行目标检测，为了方便上手，这里采用OpenCV人脸检测作为作为实例学习。</description></item><item><title>影像处理・网络摄像头</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E7%BD%91%E7%BB%9C%E6%91%84%E5%83%8F%E5%A4%B4/</link><pubDate>Sun, 26 Sep 2021 22:10:47 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E7%BD%91%E7%BB%9C%E6%91%84%E5%83%8F%E5%A4%B4/</guid><description>了解到如何使用OpenCV调用摄像头并显示视频内容后，我们可以尝试实现支持远程客户端的网络摄像头。我们将使用到OpenCV以及WebSockets。</description></item><item><title>影像处理・调用摄像头</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4/</link><pubDate>Thu, 16 Sep 2021 17:09:02 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4/</guid><description>影像处理免不了读取视频和调用摄像头，在OpenCV中可以使用&lt;code>VideoCapture&lt;/code>工具快速完成视频读取以及摄像头调用。</description></item><item><title>影像处理・OpenCV简介</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86opencv%E7%AE%80%E4%BB%8B/</link><pubDate>Tue, 31 Aug 2021 11:42:19 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86opencv%E7%AE%80%E4%BB%8B/</guid><description>下面，我们初步认识一下OpenCV这款计算机视觉处理程序开发库。</description></item><item><title>影像处理・操作环境准备</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Sat, 14 Aug 2021 23:04:26 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>本章会使用Python进行一些影像处理操作。除了需要Python3.6+外，我们还需要安装一些扩展库。</description></item><item><title>隐写术・将游戏存入图像</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%B0%86%E6%B8%B8%E6%88%8F%E5%AD%98%E5%85%A5%E5%9B%BE%E5%83%8F/</link><pubDate>Sat, 12 Jun 2021 20:17:49 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%B0%86%E6%B8%B8%E6%88%8F%E5%AD%98%E5%85%A5%E5%9B%BE%E5%83%8F/</guid><description>我们已经可以将文本资料通过编码成qrcode然后隐藏到载体图像。事实上Python代码也是文本资料，因此我们实际上也可以将Python代码作为文本资料隐藏到载体图像。</description></item><item><title>隐写术・图文隐写术</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%9B%BE%E6%96%87%E9%9A%90%E5%86%99%E6%9C%AF/</link><pubDate>Sat, 12 Jun 2021 20:17:29 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%9B%BE%E6%96%87%E9%9A%90%E5%86%99%E6%9C%AF/</guid><description>把图像隐写术与二维码技术结合就能实现将文本内容转换成二维码，然后隐藏到载体图像的图文隐写术。</description></item><item><title>隐写术・QRCode</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AFqrcode/</link><pubDate>Sat, 12 Jun 2021 20:17:04 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AFqrcode/</guid><description>上一节我们完成了将二值化图像存储在载体图像中的操作，为了方便存储更加丰富的讯息我们可以将二维码图像作为二值化的内容图像。</description></item><item><title>隐写术・图像隐写术</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%9B%BE%E5%83%8F%E9%9A%90%E5%86%99%E6%9C%AF/</link><pubDate>Sat, 12 Jun 2021 20:16:41 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%9B%BE%E5%83%8F%E9%9A%90%E5%86%99%E6%9C%AF/</guid><description>在了解了一些基本的图像处理操作后，我们开始着手实现图像隐写术。</description></item><item><title>隐写术・图像处理</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</link><pubDate>Sat, 12 Jun 2021 20:15:42 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</guid><description>将机要讯息藏匿于没有关联的图像资料是隐写术的常见操作，为了学习这种方法，我们有必要先了解一些基本的图像处理操作。</description></item><item><title>隐写术・文件隐写术</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E6%96%87%E4%BB%B6%E9%9A%90%E5%86%99%E6%9C%AF/</link><pubDate>Sun, 06 Jun 2021 19:08:55 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E6%96%87%E4%BB%B6%E9%9A%90%E5%86%99%E6%9C%AF/</guid><description>维基百科: 隐写术是一门关于信息隐藏的技巧与科学，所谓信息隐藏指的是不让除预期的接收者之外的任何人知晓信息的传递事件或者信息的内容。隐写术的英文叫做Steganography，来源于特里特米乌斯的一本讲述密码学与隐写术的著作Steganographia，该书书名源于希腊语，意为「隐秘书写」。</description></item><item><title>隐写术・操作环境准备</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Sun, 06 Jun 2021 19:08:42 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>本章会使用Python进行一些图像处理操作。除了需要Python3.6+外，我们还需要安装一些扩展库。</description></item><item><title>网络篇・并发端口扫描</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87%E5%B9%B6%E5%8F%91%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</link><pubDate>Sat, 22 May 2021 23:12:41 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87%E5%B9%B6%E5%8F%91%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</guid><description>上一节我们实现了一个简单的端口扫描工具，接下来我们把它升级成为多线程版本。</description></item><item><title>网络篇・端口扫描</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</link><pubDate>Sat, 22 May 2021 23:12:01 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</guid><description>维基百科: 端口扫描工具（Port Scanner）指用于探测服务器或主机开放端口情况的工具。常被计算机管理员用于确认安全策略，同时被攻击者用于识别目标主机上的可运作的网络服务。端口扫描定义是客户端向一定范围的服务器端口发送对应请求，以此确认可使用的端口。虽然其本身并不是恶意的网络活动，但也是网络攻击者探测目标主机服务，以利用该服务的已知漏洞的重要手段。端口扫描的主要用途仍然只是确认远程机器某个服务的可用性。</description></item><item><title>网络篇・UDP通信</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87udp%E9%80%9A%E4%BF%A1/</link><pubDate>Sat, 22 May 2021 23:11:33 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87udp%E9%80%9A%E4%BF%A1/</guid><description>之前我们尝试了TCP服务器与客户端的通讯，现在我们要实现一个服务器，通过UDP协议与客户端程序通讯。</description></item><item><title>网络篇・TCP通信</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87tcp%E9%80%9A%E4%BF%A1/</link><pubDate>Sat, 22 May 2021 23:10:36 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87tcp%E9%80%9A%E4%BF%A1/</guid><description>现在我们要实现一个服务器，通过TCP协议与客户端程序通讯。</description></item><item><title>网络篇・Web爬虫</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87web%E7%88%AC%E8%99%AB/</link><pubDate>Sat, 22 May 2021 23:10:22 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87web%E7%88%AC%E8%99%AB/</guid><description>我们学习了如何使用Python访问网络上的HTTP资源，下面我们将使用一个叫&lt;a href="https://jandan.net/">煎蛋&lt;/a>的网站来入手学习Web爬虫技术。</description></item><item><title>网络篇・HTTP协议</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87http%E5%8D%8F%E8%AE%AE/</link><pubDate>Tue, 11 May 2021 16:28:43 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87http%E5%8D%8F%E8%AE%AE/</guid><description>HTTP是一种能够获取如HTML这样的网络资源的protocol(通讯协议)。它是在Web上进行数据交换的基础，是一种client-server协议，也就是说，请求通常是由像浏览器这样的接受方发起的。一个完整的Web文档通常是由不同的子文档拼接而成的，像是文本、布局描述、图片、视频、脚本等等。</description></item><item><title>网络篇・操作环境准备</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Tue, 11 May 2021 16:28:28 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>本章会使用Python进行一些网络相关的操作。除了需要安装Python外，我们还需要使用Chrome「可以用Chromium替代」或Firefox浏览器进行辅助。</description></item><item><title>密码篇・PyCryptodome示例「扩展」</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87pycryptodome%E7%A4%BA%E4%BE%8B%E6%89%A9%E5%B1%95/</link><pubDate>Thu, 06 May 2021 11:24:03 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87pycryptodome%E7%A4%BA%E4%BE%8B%E6%89%A9%E5%B1%95/</guid><description>PyCryptodome是一个低级密码学原语的独立Python包，它支持Python2.6、Python2.7以及Python3.4或更新的版本，另外还包括PyPy。</description></item><item><title>密码篇・并行密码猜解</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%B9%B6%E8%A1%8C%E5%AF%86%E7%A0%81%E7%8C%9C%E8%A7%A3/</link><pubDate>Sun, 02 May 2021 15:46:01 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%B9%B6%E8%A1%8C%E5%AF%86%E7%A0%81%E7%8C%9C%E8%A7%A3/</guid><description>在上一节中我们实现了简单的ZIP压缩包密码猜解。为了充分利用计算机的性能我们可以同时使用多个CPU核心参与破译，这一节中我们将实现多核心版本或者称为并行版本的密码猜解程序。</description></item><item><title>汇编语言「Linux/x86-64」・代码解析</title><link>https://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Sat, 01 May 2021 19:38:19 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>上一节中我们编译运行了一段NASM汇编代码，接下来我们将针对上一节的代码进行解析，了解一些具体的汇编知识。</description></item><item><title>密码篇・密码猜解</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AF%86%E7%A0%81%E7%8C%9C%E8%A7%A3/</link><pubDate>Sun, 25 Apr 2021 22:00:57 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AF%86%E7%A0%81%E7%8C%9C%E8%A7%A3/</guid><description>几乎所有成熟的商用密码都能经受严格的密码破解分析，一般来说想要对一个加密的数据进行破译最简单的方法就是直接猜测密钥，如果条件允许甚至可以进行大量尝试。为了提高破译效率可以先准备好大量的可能性较高的密钥，然后依次遍历猜测密钥，这种做法有个名词叫“字典爆破”。</description></item><item><title>密码篇・实际应用</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</link><pubDate>Sun, 25 Apr 2021 17:20:41 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</guid><description>之前我们学习了一些密码学的基本概念和原理，接下来我们研究一下密码学技术在实际应用中需要关注的一些问题。</description></item><item><title>懒惰人哪，你要睡到几时呢？</title><link>https://bxtkezhan.github.io/%E6%87%92%E6%83%B0%E4%BA%BA%E5%93%AA%E4%BD%A0%E8%A6%81%E7%9D%A1%E5%88%B0%E5%87%A0%E6%97%B6%E5%91%A2/</link><pubDate>Sat, 24 Apr 2021 20:04:51 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%87%92%E6%83%B0%E4%BA%BA%E5%93%AA%E4%BD%A0%E8%A6%81%E7%9D%A1%E5%88%B0%E5%87%A0%E6%97%B6%E5%91%A2/</guid><description>箴言 6 9 懒惰人哪，你要睡到几时呢？你何时睡醒呢？10 再睡片时，打盹片时，抱着手躺卧片时，11 你的贫穷就必如强盗速来，你的缺乏仿佛拿兵器的人来到。</description></item><item><title>汇编语言「Linux/x86-64」・第一步</title><link>https://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E7%AC%AC%E4%B8%80%E6%AD%A5/</link><pubDate>Tue, 20 Apr 2021 00:26:43 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E7%AC%AC%E4%B8%80%E6%AD%A5/</guid><description>汇编语言是一系列用于电脑、处理器、控制器，或其他可以编程器件的低级语言的统称。通常不同的设备会对应不同的汇编语言。下面着重介绍Linux下的64位汇编语言 &lt;strong>NASM x86-64&lt;/strong>，我这边主要使用Ubuntu系统进行作业，原则上其他版本的64位Linux也同样可以进行相应的操作，只不过某些命令会有所不同，需要大家注意。</description></item><item><title>密码篇・公开密钥加密</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</link><pubDate>Sun, 18 Apr 2021 18:17:37 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</guid><description>维基百科: 公开密钥密码学（英语：Public-key cryptography）也称非对称式密码学（英语：Asymmetric cryptography）是密码学的一种算法，它需要两个密钥，一个是公开密钥，另一个是私有密钥；公钥用作加密，私钥则用作解密。使用公钥把明文加密后所得的密文，只能用相对应的私钥才能解密并得到原本的明文，最初用来加密的公钥不能用作解密。</description></item><item><title>保守公义的心，行走正直的路</title><link>https://bxtkezhan.github.io/%E4%BF%9D%E5%AE%88%E5%85%AC%E4%B9%89%E7%9A%84%E5%BF%83%E8%A1%8C%E8%B5%B0%E6%AD%A3%E7%9B%B4%E7%9A%84%E8%B7%AF/</link><pubDate>Sat, 17 Apr 2021 19:20:59 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BF%9D%E5%AE%88%E5%85%AC%E4%B9%89%E7%9A%84%E5%BF%83%E8%A1%8C%E8%B5%B0%E6%AD%A3%E7%9B%B4%E7%9A%84%E8%B7%AF/</guid><description>箴言 11 1 诡诈的天平为耶和华所憎恶，公平的法码为他所喜悦。 2 骄傲来，羞耻也来，谦逊人却有智慧。</description></item><item><title>密码篇・对称密钥加密</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</link><pubDate>Sun, 11 Apr 2021 14:18:23 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</guid><description>对称密钥算法（英语：Symmetric-key algorithm）又称为对称加密、私钥加密、共享密钥加密，是密码学中的一类加密算法。这类算法在加密和解密时使用相同的密钥，或是使用两个可以简单地相互推算的密钥。</description></item><item><title>密码篇・密码学简介</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%80%E4%BB%8B/</link><pubDate>Sat, 10 Apr 2021 22:20:15 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%80%E4%BB%8B/</guid><description>密码学（英语：Cryptography）可分为古典密码学和现代密码学。古典密码学主要关注信息的保密书写和传递，以及与其相对应的破译方法。而现代密码学不只关注信息保密问题，还同时涉及信息完整性验证（消息验证码）、信息发布的不可抵赖性（数字签名）、以及在分布式计算中产生的来源于内部和外部的攻击的所有信息安全问题。</description></item><item><title>你的泉源岂可涨溢在外？</title><link>https://bxtkezhan.github.io/%E4%BD%A0%E7%9A%84%E6%B3%89%E6%BA%90%E5%B2%82%E5%8F%AF%E6%B6%A8%E6%BA%A2%E5%9C%A8%E5%A4%96/</link><pubDate>Fri, 09 Apr 2021 17:41:20 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BD%A0%E7%9A%84%E6%B3%89%E6%BA%90%E5%B2%82%E5%8F%AF%E6%B6%A8%E6%BA%A2%E5%9C%A8%E5%A4%96/</guid><description>箴言 5 15 你要喝自己池中的水，饮自己井里的活水。 16 你的泉源岂可涨溢在外？你的河水岂可流在街上？ 17 唯独归你一人，不可与外人同用。</description></item><item><title>推荐几本C/C++书籍【免费下载】</title><link>https://bxtkezhan.github.io/%E6%8E%A8%E8%8D%90%E5%87%A0%E6%9C%ACc/c-%E4%B9%A6%E7%B1%8D%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD/</link><pubDate>Fri, 09 Apr 2021 14:25:24 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%8E%A8%E8%8D%90%E5%87%A0%E6%9C%ACc/c-%E4%B9%A6%E7%B1%8D%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD/</guid><description>根据之前的投票结果，C/C++也是票数非常多的选项，那么这里也推荐几本C/C++书籍。</description></item><item><title>密码篇・操作环境准备</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Thu, 08 Apr 2021 23:43:25 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>Python作为一门流行的脚本语言很早就被Mac OS、主流Linux发行版所预装，一般来说只需要确保自己系统的Python版本不要太旧「建议高于3.5」，如果是Windows用户可以去往Python的官方网站 &lt;a href="https://www.python.org">www.python.org&lt;/a> 进行下载安装。</description></item><item><title>初学篇・猜字游戏「阶段练习」</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E7%8C%9C%E5%AD%97%E6%B8%B8%E6%88%8F%E9%98%B6%E6%AE%B5%E7%BB%83%E4%B9%A0/</link><pubDate>Tue, 06 Apr 2021 13:58:16 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E7%8C%9C%E5%AD%97%E6%B8%B8%E6%88%8F%E9%98%B6%E6%AE%B5%E7%BB%83%E4%B9%A0/</guid><description>猜字游戏涉及的Python基础知识比较丰富且十分容易实现，可以作为《黑客之路・Python篇・初学者篇》的阶段性练习“项目”。</description></item><item><title>初学篇・面向对象&amp;数据结构</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Sun, 04 Apr 2021 19:04:02 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>在Python当中，我们常常使用到的基本数据类型有整型&lt;code>int&lt;/code>、浮点型&lt;code>float&lt;/code>、字符串类型&lt;code>str&lt;/code>……，以及结构类型列表&lt;code>list&lt;/code>、元组&lt;code>tuple&lt;/code>，事实上我们也可以自己来定义类型，这将涉及到Python的面向对象编程。</description></item><item><title>初学篇・函数的定义与调用</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E8%B0%83%E7%94%A8/</link><pubDate>Sun, 04 Apr 2021 15:54:47 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E8%B0%83%E7%94%A8/</guid><description>函数是指可重复使用的程序片段。被用来为某个代码块赋予名字，通过这一特殊的名字可以在程序的任何地方来运行代码块，并可重复任何次数。这就是所谓的调用函数。我们已经使用过了许多内置的函数，例如: &lt;code>print&lt;/code>、&lt;code>len&lt;/code>和&lt;code>range&lt;/code>。</description></item><item><title>初学篇・循环控制语句</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</link><pubDate>Sun, 04 Apr 2021 14:07:06 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</guid><description>在Python中可以通过&lt;code>while&lt;/code>与&lt;code>for&lt;/code>两种循环语句来处理循环问题。</description></item><item><title>初学篇・条件控制语句</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</link><pubDate>Sat, 03 Apr 2021 22:55:25 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</guid><description>&lt;code>if&lt;/code>语句用以根据条件判断如何执行代码: 如果条件为真&lt;code>True&lt;/code>，我们将运行一块语句(称作 if-block 或 if 块)，否则我们将运行另一块语句(称作 else-block 或 else 块)。其中&lt;code>else&lt;/code>从句是可选的。</description></item><item><title>初学篇・逻辑运算&amp;比较运算</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97/</link><pubDate>Sat, 03 Apr 2021 22:05:14 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97/</guid><description>Python当中可以用&lt;code>and&lt;/code>、&lt;code>or&lt;/code>、&lt;code>not&lt;/code>关键字来进行与、或、非逻辑运算，而&lt;code>True&lt;/code>、&lt;code>False&lt;/code>则用于表示布尔值中的真与假；Python当中可以使用&lt;code>&amp;gt;&lt;/code>、&lt;code>&amp;gt;=&lt;/code>、&lt;code>==&lt;/code>、&lt;code>&amp;lt;=&lt;/code>、&lt;code>&amp;lt;&lt;/code>、&lt;code>!=&lt;/code>符号来进行值的比较。</description></item><item><title>初学篇・Python计算器</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87python%E8%AE%A1%E7%AE%97%E5%99%A8/</link><pubDate>Sat, 03 Apr 2021 20:43:12 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87python%E8%AE%A1%E7%AE%97%E5%99%A8/</guid><description>我们可以使用Python来进行一系列的计算器操作，如果足够熟悉Python，那么它将胜过许多高级计算器，甚至某些高级计算器就内置了Python，例如: Casio 卡西欧 FX-9860 GIII 图形计算器。</description></item><item><title>初学篇・第一步“你好世界”</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E7%AC%AC%E4%B8%80%E6%AD%A5%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/</link><pubDate>Sat, 03 Apr 2021 19:25:30 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E7%AC%AC%E4%B8%80%E6%AD%A5%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/</guid><description>Python是一种广泛使用的直译式、进阶和通用的程式语言。Python支援多种程式设计范式，包括函数式、指令式、结构化、物件导向和反射式程式。它拥有动态型别系统和垃圾回收功能，能够自动管理记忆体使用，并且其本身拥有一个巨大而广泛的标准库。</description></item><item><title>黑客之路・编译原理</title><link>https://bxtkezhan.github.io/%E9%BB%91%E5%AE%A2%E4%B9%8B%E8%B7%AF%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</link><pubDate>Wed, 31 Mar 2021 23:21:44 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%BB%91%E5%AE%A2%E4%B9%8B%E8%B7%AF%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</guid><description>和编程相关的一些计算机技术，包括编译原理，汇编语言，llvm，gcc。</description></item><item><title>黑客之路・C/C++篇</title><link>https://bxtkezhan.github.io/%E9%BB%91%E5%AE%A2%E4%B9%8B%E8%B7%AFc/c-%E7%AF%87/</link><pubDate>Wed, 31 Mar 2021 23:21:42 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%BB%91%E5%AE%A2%E4%B9%8B%E8%B7%AFc/c-%E7%AF%87/</guid><description>正在制作中&amp;hellip;</description></item><item><title>黑客之路・Python篇</title><link>https://bxtkezhan.github.io/%E9%BB%91%E5%AE%A2%E4%B9%8B%E8%B7%AFpython%E7%AF%87/</link><pubDate>Wed, 31 Mar 2021 23:21:39 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%BB%91%E5%AE%A2%E4%B9%8B%E8%B7%AFpython%E7%AF%87/</guid><description>围绕Python程序语言展开的一系列或有趣或实用的技术，欢迎喜欢计算机，软硬件，Python编程技术的朋友参与学习。</description></item><item><title>支持While语句</title><link>https://bxtkezhan.github.io/%E6%94%AF%E6%8C%81while%E8%AF%AD%E5%8F%A5/</link><pubDate>Wed, 31 Mar 2021 14:17:49 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%94%AF%E6%8C%81while%E8%AF%AD%E5%8F%A5/</guid><description>下面我们来让程序语言支持While语句，这会使得&lt;strong>bkcalclang&lt;/strong>能够解决一些依赖循环结构处理的问题。</description></item><item><title>推荐几本Python书籍【免费下载】</title><link>https://bxtkezhan.github.io/%E6%8E%A8%E8%8D%90%E5%87%A0%E6%9C%ACpython%E4%B9%A6%E7%B1%8D%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD/</link><pubDate>Mon, 29 Mar 2021 20:26:01 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%8E%A8%E8%8D%90%E5%87%A0%E6%9C%ACpython%E4%B9%A6%E7%B1%8D%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD/</guid><description>根据投票结果，Python为票数最多的选项，那么这里推荐几本Python书籍。</description></item><item><title>支持If语句</title><link>https://bxtkezhan.github.io/%E6%94%AF%E6%8C%81if%E8%AF%AD%E5%8F%A5/</link><pubDate>Mon, 29 Mar 2021 16:42:47 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%94%AF%E6%8C%81if%E8%AF%AD%E5%8F%A5/</guid><description>下面我们来让程序语言支持If语句，这会使得&lt;strong>bkcalclang&lt;/strong>能够处理更加复杂的问题。</description></item><item><title>使程序语言支持变量</title><link>https://bxtkezhan.github.io/%E4%BD%BF%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E5%8F%98%E9%87%8F/</link><pubDate>Fri, 26 Mar 2021 14:49:43 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BD%BF%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E5%8F%98%E9%87%8F/</guid><description>下面我们来让计算器程序支持变量的使用，使得程序可以设置和获取变量的值。从现在开始我将不掩藏我们要实现的是一个程序语言，因为出自计算器所以命名为 &lt;strong>bkcalclang&lt;/strong></description></item><item><title>使计算器支持语句块</title><link>https://bxtkezhan.github.io/%E4%BD%BF%E8%AE%A1%E7%AE%97%E5%99%A8%E6%94%AF%E6%8C%81%E8%AF%AD%E5%8F%A5%E5%9D%97/</link><pubDate>Wed, 24 Mar 2021 18:45:28 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BD%BF%E8%AE%A1%E7%AE%97%E5%99%A8%E6%94%AF%E6%8C%81%E8%AF%AD%E5%8F%A5%E5%9D%97/</guid><description>下面我们来为计算器程序增加语句块功能，使得程序可以做批量运算，类似于程序语言中的代码块。</description></item><item><title>递归向下算法实现Calc</title><link>https://bxtkezhan.github.io/%E9%80%92%E5%BD%92%E5%90%91%E4%B8%8B%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0calc/</link><pubDate>Wed, 17 Mar 2021 21:26:32 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%80%92%E5%BD%92%E5%90%91%E4%B8%8B%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0calc/</guid><description>利用递归向下算法结合我们的&lt;code>BKLexer&lt;/code>实现支持四则运算与括号优先级的计算器程序。</description></item><item><title>使用BKLexer进行词法分析</title><link>https://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8bklexer%E8%BF%9B%E8%A1%8C%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</link><pubDate>Sat, 13 Mar 2021 22:55:41 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8bklexer%E8%BF%9B%E8%A1%8C%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</guid><description>前几天我已经封装好了词法分析器并命名&lt;code>BKLexer&lt;/code>，当前&lt;code>BKLexer&lt;/code>分别支持Go/C++/Python。</description></item><item><title>词法分析器</title><link>https://bxtkezhan.github.io/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/</link><pubDate>Sat, 06 Mar 2021 21:26:02 +0800</pubDate><guid>https://bxtkezhan.github.io/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/</guid><description>维基百科介绍：词法分析是计算机科学中将字符序列转换为标记序列的过程。进行词法分析的程序或者函数叫作词法分析器。️</description></item></channel></rss>