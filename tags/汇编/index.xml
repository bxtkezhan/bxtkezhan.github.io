<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>汇编 on bxtkezhan@kk</title><link>http://bxtkezhan.github.io/tags/%E6%B1%87%E7%BC%96/</link><description>Recent content in 汇编 on bxtkezhan@kk</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 12 Sep 2022 19:50:38 +0800</lastBuildDate><atom:link href="http://bxtkezhan.github.io/tags/%E6%B1%87%E7%BC%96/index.xml" rel="self" type="application/rss+xml"/><item><title>JIT・Lightning 示例「printf」</title><link>http://bxtkezhan.github.io/jitlightning-%E7%A4%BA%E4%BE%8Bprintf/</link><pubDate>Mon, 12 Sep 2022 19:50:38 +0800</pubDate><guid>http://bxtkezhan.github.io/jitlightning-%E7%A4%BA%E4%BE%8Bprintf/</guid><description>在了解lightning的基本使用方式后，我们再来了解如何在lightning中调用c函数。</description></item><item><title>JIT・Lightning 示例「incr」</title><link>http://bxtkezhan.github.io/jitlightning-%E7%A4%BA%E4%BE%8Bincr/</link><pubDate>Tue, 06 Sep 2022 15:14:11 +0800</pubDate><guid>http://bxtkezhan.github.io/jitlightning-%E7%A4%BA%E4%BE%8Bincr/</guid><description>在上一篇文章中我们简单地介绍了一下GNU/Lightning，现在我们来讲解上一篇文章中测试用的示例。</description></item><item><title>JIT・GNU/Lightning</title><link>http://bxtkezhan.github.io/jitgnu/lightning/</link><pubDate>Thu, 01 Sep 2022 15:35:50 +0800</pubDate><guid>http://bxtkezhan.github.io/jitgnu/lightning/</guid><description>在之前的文章中我们了解了一点基础的汇编语法以及与C程序的混用技巧，现在我们进一步来学习使用及时编译技巧「JIT」。</description></item><item><title>汇编语言「Linux/x86-64」・调用C程序</title><link>http://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E8%B0%83%E7%94%A8c%E7%A8%8B%E5%BA%8F/</link><pubDate>Sun, 17 Oct 2021 15:35:44 +0800</pubDate><guid>http://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E8%B0%83%E7%94%A8c%E7%A8%8B%E5%BA%8F/</guid><description>在有操作系统的情况下使用纯汇编开发程序的情况非常少，即便是不得不用汇编的场景也常常是使用汇编结合高级编程语言的方式进行开发。下面我们来了解一下如何在汇编之中调用C程序以及在C程序中调用汇编。</description></item><item><title>汇编语言「Linux/x86-64」・代码解析</title><link>http://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Sat, 01 May 2021 19:38:19 +0800</pubDate><guid>http://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>上一节中我们编译运行了一段NASM汇编代码，接下来我们将针对上一节的代码进行解析，了解一些具体的汇编知识。</description></item><item><title>汇编语言「Linux/x86-64」・第一步</title><link>http://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E7%AC%AC%E4%B8%80%E6%AD%A5/</link><pubDate>Tue, 20 Apr 2021 00:26:43 +0800</pubDate><guid>http://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E7%AC%AC%E4%B8%80%E6%AD%A5/</guid><description>汇编语言是一系列用于电脑、处理器、控制器，或其他可以编程器件的低级语言的统称。通常不同的设备会对应不同的汇编语言。下面着重介绍Linux下的64位汇编语言 &lt;strong>NASM x86-64&lt;/strong>，我这边主要使用Ubuntu系统进行作业，原则上其他版本的64位Linux也同样可以进行相应的操作，只不过某些命令会有所不同，需要大家注意。</description></item></channel></rss>