<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程 on bxtkezhan@kk</title><link>http://bxtkezhan.github.io/tags/%E7%BC%96%E7%A8%8B/</link><description>Recent content in 编程 on bxtkezhan@kk</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 12 Sep 2022 19:50:38 +0800</lastBuildDate><atom:link href="http://bxtkezhan.github.io/tags/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>JIT・Lightning 示例「printf」</title><link>http://bxtkezhan.github.io/jitlightning-%E7%A4%BA%E4%BE%8Bprintf/</link><pubDate>Mon, 12 Sep 2022 19:50:38 +0800</pubDate><guid>http://bxtkezhan.github.io/jitlightning-%E7%A4%BA%E4%BE%8Bprintf/</guid><description>在了解lightning的基本使用方式后，我们再来了解如何在lightning中调用c函数。</description></item><item><title>JIT・Lightning 示例「incr」</title><link>http://bxtkezhan.github.io/jitlightning-%E7%A4%BA%E4%BE%8Bincr/</link><pubDate>Tue, 06 Sep 2022 15:14:11 +0800</pubDate><guid>http://bxtkezhan.github.io/jitlightning-%E7%A4%BA%E4%BE%8Bincr/</guid><description>在上一篇文章中我们简单地介绍了一下GNU/Lightning，现在我们来讲解上一篇文章中测试用的示例。</description></item><item><title>JIT・GNU/Lightning</title><link>http://bxtkezhan.github.io/jitgnu/lightning/</link><pubDate>Thu, 01 Sep 2022 15:35:50 +0800</pubDate><guid>http://bxtkezhan.github.io/jitgnu/lightning/</guid><description>在之前的文章中我们了解了一点基础的汇编语法以及与C程序的混用技巧，现在我们进一步来学习使用及时编译技巧「JIT」。</description></item><item><title>汇编语言「Linux/x86-64」・调用C程序</title><link>http://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E8%B0%83%E7%94%A8c%E7%A8%8B%E5%BA%8F/</link><pubDate>Sun, 17 Oct 2021 15:35:44 +0800</pubDate><guid>http://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E8%B0%83%E7%94%A8c%E7%A8%8B%E5%BA%8F/</guid><description>在有操作系统的情况下使用纯汇编开发程序的情况非常少，即便是不得不用汇编的场景也常常是使用汇编结合高级编程语言的方式进行开发。下面我们来了解一下如何在汇编之中调用C程序以及在C程序中调用汇编。</description></item><item><title>汇编语言「Linux/x86-64」・代码解析</title><link>http://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</link><pubDate>Sat, 01 May 2021 19:38:19 +0800</pubDate><guid>http://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</guid><description>上一节中我们编译运行了一段NASM汇编代码，接下来我们将针对上一节的代码进行解析，了解一些具体的汇编知识。</description></item><item><title>汇编语言「Linux/x86-64」・第一步</title><link>http://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E7%AC%AC%E4%B8%80%E6%AD%A5/</link><pubDate>Tue, 20 Apr 2021 00:26:43 +0800</pubDate><guid>http://bxtkezhan.github.io/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80linux/x86-64%E7%AC%AC%E4%B8%80%E6%AD%A5/</guid><description>汇编语言是一系列用于电脑、处理器、控制器，或其他可以编程器件的低级语言的统称。通常不同的设备会对应不同的汇编语言。下面着重介绍Linux下的64位汇编语言 &lt;strong>NASM x86-64&lt;/strong>，我这边主要使用Ubuntu系统进行作业，原则上其他版本的64位Linux也同样可以进行相应的操作，只不过某些命令会有所不同，需要大家注意。</description></item><item><title>黑客之路・编译原理</title><link>http://bxtkezhan.github.io/%E9%BB%91%E5%AE%A2%E4%B9%8B%E8%B7%AF%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</link><pubDate>Wed, 31 Mar 2021 23:21:44 +0800</pubDate><guid>http://bxtkezhan.github.io/%E9%BB%91%E5%AE%A2%E4%B9%8B%E8%B7%AF%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</guid><description>和编程相关的一些计算机技术，包括编译原理，汇编语言，llvm，gcc。</description></item><item><title>支持While语句</title><link>http://bxtkezhan.github.io/%E6%94%AF%E6%8C%81while%E8%AF%AD%E5%8F%A5/</link><pubDate>Wed, 31 Mar 2021 14:17:49 +0800</pubDate><guid>http://bxtkezhan.github.io/%E6%94%AF%E6%8C%81while%E8%AF%AD%E5%8F%A5/</guid><description>下面我们来让程序语言支持While语句，这会使得&lt;strong>bkcalclang&lt;/strong>能够解决一些依赖循环结构处理的问题。</description></item><item><title>支持If语句</title><link>http://bxtkezhan.github.io/%E6%94%AF%E6%8C%81if%E8%AF%AD%E5%8F%A5/</link><pubDate>Mon, 29 Mar 2021 16:42:47 +0800</pubDate><guid>http://bxtkezhan.github.io/%E6%94%AF%E6%8C%81if%E8%AF%AD%E5%8F%A5/</guid><description>下面我们来让程序语言支持If语句，这会使得&lt;strong>bkcalclang&lt;/strong>能够处理更加复杂的问题。</description></item><item><title>使程序语言支持变量</title><link>http://bxtkezhan.github.io/%E4%BD%BF%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E5%8F%98%E9%87%8F/</link><pubDate>Fri, 26 Mar 2021 14:49:43 +0800</pubDate><guid>http://bxtkezhan.github.io/%E4%BD%BF%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E5%8F%98%E9%87%8F/</guid><description>下面我们来让计算器程序支持变量的使用，使得程序可以设置和获取变量的值。从现在开始我将不掩藏我们要实现的是一个程序语言，因为出自计算器所以命名为 &lt;strong>bkcalclang&lt;/strong></description></item><item><title>使计算器支持语句块</title><link>http://bxtkezhan.github.io/%E4%BD%BF%E8%AE%A1%E7%AE%97%E5%99%A8%E6%94%AF%E6%8C%81%E8%AF%AD%E5%8F%A5%E5%9D%97/</link><pubDate>Wed, 24 Mar 2021 18:45:28 +0800</pubDate><guid>http://bxtkezhan.github.io/%E4%BD%BF%E8%AE%A1%E7%AE%97%E5%99%A8%E6%94%AF%E6%8C%81%E8%AF%AD%E5%8F%A5%E5%9D%97/</guid><description>下面我们来为计算器程序增加语句块功能，使得程序可以做批量运算，类似于程序语言中的代码块。</description></item><item><title>递归向下算法实现Calc</title><link>http://bxtkezhan.github.io/%E9%80%92%E5%BD%92%E5%90%91%E4%B8%8B%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0calc/</link><pubDate>Wed, 17 Mar 2021 21:26:32 +0800</pubDate><guid>http://bxtkezhan.github.io/%E9%80%92%E5%BD%92%E5%90%91%E4%B8%8B%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0calc/</guid><description>利用递归向下算法结合我们的&lt;code>BKLexer&lt;/code>实现支持四则运算与括号优先级的计算器程序。</description></item><item><title>使用BKLexer进行词法分析</title><link>http://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8bklexer%E8%BF%9B%E8%A1%8C%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</link><pubDate>Sat, 13 Mar 2021 22:55:41 +0800</pubDate><guid>http://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8bklexer%E8%BF%9B%E8%A1%8C%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</guid><description>前几天我已经封装好了词法分析器并命名&lt;code>BKLexer&lt;/code>，当前&lt;code>BKLexer&lt;/code>分别支持Go/C++/Python。</description></item><item><title>词法分析器</title><link>http://bxtkezhan.github.io/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/</link><pubDate>Sat, 06 Mar 2021 21:26:02 +0800</pubDate><guid>http://bxtkezhan.github.io/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/</guid><description>维基百科介绍：词法分析是计算机科学中将字符序列转换为标记序列的过程。进行词法分析的程序或者函数叫作词法分析器。️</description></item></channel></rss>