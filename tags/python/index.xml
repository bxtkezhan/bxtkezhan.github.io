<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on bxtkezhan@kk</title><link>https://bxtkezhan.github.io/tags/python/</link><description>Recent content in python on bxtkezhan@kk</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 28 Aug 2023 23:43:01 +0800</lastBuildDate><atom:link href="https://bxtkezhan.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>语音识别・MFCC特征</title><link>https://bxtkezhan.github.io/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%ABmfcc%E7%89%B9%E5%BE%81/</link><pubDate>Mon, 28 Aug 2023 23:43:01 +0800</pubDate><guid>https://bxtkezhan.github.io/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%ABmfcc%E7%89%B9%E5%BE%81/</guid><description>做语音识别前常常需要先对音频文件做预编码处理，然后将处理后的数据送入模型做进一步的推理或者训练。</description></item><item><title>使用计算机视觉技术进行PCB图像连接线检测</title><link>https://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%8A%80%E6%9C%AF%E8%BF%9B%E8%A1%8Cpcb%E5%9B%BE%E5%83%8F%E8%BF%9E%E6%8E%A5%E7%BA%BF%E6%A3%80%E6%B5%8B/</link><pubDate>Mon, 12 Jun 2023 22:31:45 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%8A%80%E6%9C%AF%E8%BF%9B%E8%A1%8Cpcb%E5%9B%BE%E5%83%8F%E8%BF%9E%E6%8E%A5%E7%BA%BF%E6%A3%80%E6%B5%8B/</guid><description>我们会使用 matplotlib 进行绘图，并使用 numpy 处理数组相关的数值计算，以及使用 opencv 提供的计算机视觉工具，请确保工作环境可以正确引入并使用它们。</description></item><item><title>使用计算机视觉技术进行PCB图像焊点检测</title><link>https://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%8A%80%E6%9C%AF%E8%BF%9B%E8%A1%8Cpcb%E5%9B%BE%E5%83%8F%E7%84%8A%E7%82%B9%E6%A3%80%E6%B5%8B/</link><pubDate>Wed, 10 May 2023 02:20:46 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%8A%80%E6%9C%AF%E8%BF%9B%E8%A1%8Cpcb%E5%9B%BE%E5%83%8F%E7%84%8A%E7%82%B9%E6%A3%80%E6%B5%8B/</guid><description>我们会使用 matplotlib 进行绘图，并使用 numpy 处理数组相关的数值计算，以及使用 opencv 提供的计算机视觉工具，请确保工作环境可以正确引入并使用它们。</description></item><item><title>盘点一下小弟用得比较多的编程语言</title><link>https://bxtkezhan.github.io/%E7%9B%98%E7%82%B9%E4%B8%80%E4%B8%8B%E5%B0%8F%E5%BC%9F%E7%94%A8%E5%BE%97%E6%AF%94%E8%BE%83%E5%A4%9A%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><pubDate>Tue, 29 Nov 2022 15:44:14 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%9B%98%E7%82%B9%E4%B8%80%E4%B8%8B%E5%B0%8F%E5%BC%9F%E7%94%A8%E5%BE%97%E6%AF%94%E8%BE%83%E5%A4%9A%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</guid><description>盘点一下小弟用得比较多的编程语言</description></item><item><title>人工神经网络・批量标准化</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%89%B9%E9%87%8F%E6%A0%87%E5%87%86%E5%8C%96/</link><pubDate>Mon, 03 Oct 2022 19:48:53 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%89%B9%E9%87%8F%E6%A0%87%E5%87%86%E5%8C%96/</guid><description>在数据处理中常常使用标准化技术对数据进行处理，一般来说标准化处理有利于提升模型对数据的拟合效果。我们也可以使用标准化技术对神经网络模型进行升级。</description></item><item><title>人工神经网络・卷积神经网络</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</link><pubDate>Mon, 03 Oct 2022 19:48:23 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</guid><description>我们之前构建的神经网络都是靠普通的线性网络层Linear进行拟合，然而在处理图像数据的时候我们其实可以用效果更好的卷积网络层。将卷积网络层加入到我们的神经网络就可以在一定程度上提升模型的准确率，而由于此种神经网络的结构中包含卷积网络层，因此，也常被叫做卷积神经网络。</description></item><item><title>人工神经网络・ReLU激活函数</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Crelu%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 03 Oct 2022 19:47:10 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Crelu%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</guid><description>上一节中我们实现了一个多层感知器神经网络用来处理图像分类问题。然而那个神经网络模型还是比较「稚嫩」，我们可以对其稍加修改，实现一定程度上的提升。</description></item><item><title>人工神经网络・多层感知器</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8/</link><pubDate>Sun, 02 Oct 2022 22:29:29 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8/</guid><description>之前我们都是采用手工构造的数据来进行学习，这一次我们将处理一个真实场景的问题——手写数字识别。</description></item><item><title>人工神经网络・Softmax多分类</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Csoftmax%E5%A4%9A%E5%88%86%E7%B1%BB/</link><pubDate>Thu, 29 Sep 2022 13:48:49 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Csoftmax%E5%A4%9A%E5%88%86%E7%B1%BB/</guid><description>逻辑回归常用于处理二分类问题的，虽然也可以通过〚联合〛的方式处理多分类问题「有超过两个以上的类别」但这样比较麻烦。在处理多分类问题的时候我们可以使用softmax替代逻辑回归里的sigmoid激活函数，这样可以实现多分类操作。</description></item><item><title>人工神经网络・逻辑回归</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</link><pubDate>Mon, 26 Sep 2022 15:02:00 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</guid><description>先前我们在最小二乘拟合那一节中了解到如何使用最小二乘的方法拟合多项式方程，那么今天我们再来学习一种「拟合」方程的方法——逻辑回归。</description></item><item><title>人工神经网络・操作环境准备</title><link>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Fri, 23 Sep 2022 23:05:46 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>本章介绍一些人工神经网络开发的技术，下面列出本章节会使用的一些依赖库。</description></item><item><title>数据分析・聚类分析</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90/</link><pubDate>Tue, 20 Sep 2022 18:59:48 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90/</guid><description>上一节中介绍了最小二乘法，本节将介绍另一个数据分析方法——聚类分析。该方法常用于处理具备几何特征关系的数据点，我们以最基础的k均值聚类为例进行说明。</description></item><item><title>数据分析・最小二乘拟合</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%8B%9F%E5%90%88/</link><pubDate>Tue, 20 Sep 2022 18:59:05 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%8B%9F%E5%90%88/</guid><description>下面我们使用最小二乘拟合的方法去拟合一系列的数据点，该操作常用于在一组数据点中窥见变化趋势。</description></item><item><title>数据分析・矩阵操作</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 19 May 2022 19:26:33 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C/</guid><description>由于本章的后部分内容需要使用到一点关于矩阵运算的基础操作，所以我们在这里先了解一下。</description></item><item><title>数据分析・资料的载入与导出</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E8%B5%84%E6%96%99%E7%9A%84%E8%BD%BD%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA/</link><pubDate>Tue, 18 Jan 2022 00:29:47 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E8%B5%84%E6%96%99%E7%9A%84%E8%BD%BD%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA/</guid><description>现在我们来了解如何在Python中进行数据的载入和导出操作，我们以Json和CSV这两个常见的文本数据类型进行讲解。</description></item><item><title>The Beginning・Python Calculator</title><link>https://bxtkezhan.github.io/the-beginningpython-calculator/</link><pubDate>Sat, 15 Jan 2022 05:00:47 +0800</pubDate><guid>https://bxtkezhan.github.io/the-beginningpython-calculator/</guid><description>We can use python to do some calc operations like a calculator. It will be power than many calculators if you know enough python. And some calculators have embedded python. Casio FX 9860 GIII is an example.</description></item><item><title>数据分析・数据可视化</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</link><pubDate>Wed, 08 Dec 2021 00:43:29 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</guid><description>Matplotlib是一个非常有用的Python数据绘图库，借助Matplotlib可以很方便的将数据可视化。</description></item><item><title>数据分析・多维数组的数值操作</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B0%E5%80%BC%E6%93%8D%E4%BD%9C/</link><pubDate>Wed, 17 Nov 2021 00:25:21 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E6%95%B0%E5%80%BC%E6%93%8D%E4%BD%9C/</guid><description>数组结构可以快速有序的处理一系列的数据。因此，在处理数据的时候常常要用到数组或多维数组，一个常用的例子就是在处理Excel表格数据的时候将其表示为二维数组。</description></item><item><title>数据分析・操作环境准备</title><link>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Mon, 15 Nov 2021 17:05:11 +0800</pubDate><guid>https://bxtkezhan.github.io/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>本章介绍一些Python数据分析的入门知识，下面列出本章节会使用的一些依赖库。</description></item><item><title>影像处理・视频编辑</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E8%A7%86%E9%A2%91%E7%BC%96%E8%BE%91/</link><pubDate>Fri, 05 Nov 2021 13:47:38 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E8%A7%86%E9%A2%91%E7%BC%96%E8%BE%91/</guid><description>关于影像处理除了进行类似计算机视觉与数字图像处理的操作，我们还可以像一些非线性编辑软件一样对视频材料进行剪辑处理，以及添加专场、字幕等操作。通常此类操作都会使用到ffmpeg这款开源的数字媒体处理工具，而它有一个叫做moviepy的接口，可以让我们轻松上手。</description></item><item><title>影像处理・人脸识别</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</link><pubDate>Mon, 04 Oct 2021 21:37:28 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</guid><description>想要使用Python实现人脸识别也不是一件难事，使用&lt;code>face_recognition&lt;/code>人脸识别开发库可以快速上手。</description></item><item><title>影像处理・目标检测</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</link><pubDate>Sun, 03 Oct 2021 20:37:53 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</guid><description>在成功调用摄像头并获取视频内容后，我们可以对视频内容进行目标检测，为了方便上手，这里采用OpenCV人脸检测作为作为实例学习。</description></item><item><title>影像处理・网络摄像头</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E7%BD%91%E7%BB%9C%E6%91%84%E5%83%8F%E5%A4%B4/</link><pubDate>Sun, 26 Sep 2021 22:10:47 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E7%BD%91%E7%BB%9C%E6%91%84%E5%83%8F%E5%A4%B4/</guid><description>了解到如何使用OpenCV调用摄像头并显示视频内容后，我们可以尝试实现支持远程客户端的网络摄像头。我们将使用到OpenCV以及WebSockets。</description></item><item><title>影像处理・调用摄像头</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4/</link><pubDate>Thu, 16 Sep 2021 17:09:02 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4/</guid><description>影像处理免不了读取视频和调用摄像头，在OpenCV中可以使用&lt;code>VideoCapture&lt;/code>工具快速完成视频读取以及摄像头调用。</description></item><item><title>影像处理・OpenCV简介</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86opencv%E7%AE%80%E4%BB%8B/</link><pubDate>Tue, 31 Aug 2021 11:42:19 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86opencv%E7%AE%80%E4%BB%8B/</guid><description>下面，我们初步认识一下OpenCV这款计算机视觉处理程序开发库。</description></item><item><title>影像处理・操作环境准备</title><link>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Sat, 14 Aug 2021 23:04:26 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%BD%B1%E5%83%8F%E5%A4%84%E7%90%86%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>本章会使用Python进行一些影像处理操作。除了需要Python3.6+外，我们还需要安装一些扩展库。</description></item><item><title>隐写术・将游戏存入图像</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%B0%86%E6%B8%B8%E6%88%8F%E5%AD%98%E5%85%A5%E5%9B%BE%E5%83%8F/</link><pubDate>Sat, 12 Jun 2021 20:17:49 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%B0%86%E6%B8%B8%E6%88%8F%E5%AD%98%E5%85%A5%E5%9B%BE%E5%83%8F/</guid><description>我们已经可以将文本资料通过编码成qrcode然后隐藏到载体图像。事实上Python代码也是文本资料，因此我们实际上也可以将Python代码作为文本资料隐藏到载体图像。</description></item><item><title>隐写术・图文隐写术</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%9B%BE%E6%96%87%E9%9A%90%E5%86%99%E6%9C%AF/</link><pubDate>Sat, 12 Jun 2021 20:17:29 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%9B%BE%E6%96%87%E9%9A%90%E5%86%99%E6%9C%AF/</guid><description>把图像隐写术与二维码技术结合就能实现将文本内容转换成二维码，然后隐藏到载体图像的图文隐写术。</description></item><item><title>隐写术・QRCode</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AFqrcode/</link><pubDate>Sat, 12 Jun 2021 20:17:04 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AFqrcode/</guid><description>上一节我们完成了将二值化图像存储在载体图像中的操作，为了方便存储更加丰富的讯息我们可以将二维码图像作为二值化的内容图像。</description></item><item><title>隐写术・图像隐写术</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%9B%BE%E5%83%8F%E9%9A%90%E5%86%99%E6%9C%AF/</link><pubDate>Sat, 12 Jun 2021 20:16:41 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%9B%BE%E5%83%8F%E9%9A%90%E5%86%99%E6%9C%AF/</guid><description>在了解了一些基本的图像处理操作后，我们开始着手实现图像隐写术。</description></item><item><title>隐写术・图像处理</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</link><pubDate>Sat, 12 Jun 2021 20:15:42 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</guid><description>将机要讯息藏匿于没有关联的图像资料是隐写术的常见操作，为了学习这种方法，我们有必要先了解一些基本的图像处理操作。</description></item><item><title>隐写术・文件隐写术</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E6%96%87%E4%BB%B6%E9%9A%90%E5%86%99%E6%9C%AF/</link><pubDate>Sun, 06 Jun 2021 19:08:55 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E6%96%87%E4%BB%B6%E9%9A%90%E5%86%99%E6%9C%AF/</guid><description>维基百科: 隐写术是一门关于信息隐藏的技巧与科学，所谓信息隐藏指的是不让除预期的接收者之外的任何人知晓信息的传递事件或者信息的内容。隐写术的英文叫做Steganography，来源于特里特米乌斯的一本讲述密码学与隐写术的著作Steganographia，该书书名源于希腊语，意为「隐秘书写」。</description></item><item><title>隐写术・操作环境准备</title><link>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Sun, 06 Jun 2021 19:08:42 +0800</pubDate><guid>https://bxtkezhan.github.io/%E9%9A%90%E5%86%99%E6%9C%AF%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>本章会使用Python进行一些图像处理操作。除了需要Python3.6+外，我们还需要安装一些扩展库。</description></item><item><title>网络篇・并发端口扫描</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87%E5%B9%B6%E5%8F%91%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</link><pubDate>Sat, 22 May 2021 23:12:41 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87%E5%B9%B6%E5%8F%91%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</guid><description>上一节我们实现了一个简单的端口扫描工具，接下来我们把它升级成为多线程版本。</description></item><item><title>网络篇・端口扫描</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</link><pubDate>Sat, 22 May 2021 23:12:01 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</guid><description>维基百科: 端口扫描工具（Port Scanner）指用于探测服务器或主机开放端口情况的工具。常被计算机管理员用于确认安全策略，同时被攻击者用于识别目标主机上的可运作的网络服务。端口扫描定义是客户端向一定范围的服务器端口发送对应请求，以此确认可使用的端口。虽然其本身并不是恶意的网络活动，但也是网络攻击者探测目标主机服务，以利用该服务的已知漏洞的重要手段。端口扫描的主要用途仍然只是确认远程机器某个服务的可用性。</description></item><item><title>网络篇・UDP通信</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87udp%E9%80%9A%E4%BF%A1/</link><pubDate>Sat, 22 May 2021 23:11:33 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87udp%E9%80%9A%E4%BF%A1/</guid><description>之前我们尝试了TCP服务器与客户端的通讯，现在我们要实现一个服务器，通过UDP协议与客户端程序通讯。</description></item><item><title>网络篇・TCP通信</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87tcp%E9%80%9A%E4%BF%A1/</link><pubDate>Sat, 22 May 2021 23:10:36 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87tcp%E9%80%9A%E4%BF%A1/</guid><description>现在我们要实现一个服务器，通过TCP协议与客户端程序通讯。</description></item><item><title>网络篇・Web爬虫</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87web%E7%88%AC%E8%99%AB/</link><pubDate>Sat, 22 May 2021 23:10:22 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87web%E7%88%AC%E8%99%AB/</guid><description>我们学习了如何使用Python访问网络上的HTTP资源，下面我们将使用一个叫&lt;a href="https://jandan.net/">煎蛋&lt;/a>的网站来入手学习Web爬虫技术。</description></item><item><title>网络篇・HTTP协议</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87http%E5%8D%8F%E8%AE%AE/</link><pubDate>Tue, 11 May 2021 16:28:43 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87http%E5%8D%8F%E8%AE%AE/</guid><description>HTTP是一种能够获取如HTML这样的网络资源的protocol(通讯协议)。它是在Web上进行数据交换的基础，是一种client-server协议，也就是说，请求通常是由像浏览器这样的接受方发起的。一个完整的Web文档通常是由不同的子文档拼接而成的，像是文本、布局描述、图片、视频、脚本等等。</description></item><item><title>网络篇・操作环境准备</title><link>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Tue, 11 May 2021 16:28:28 +0800</pubDate><guid>https://bxtkezhan.github.io/%E7%BD%91%E7%BB%9C%E7%AF%87%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>本章会使用Python进行一些网络相关的操作。除了需要安装Python外，我们还需要使用Chrome「可以用Chromium替代」或Firefox浏览器进行辅助。</description></item><item><title>密码篇・PyCryptodome示例「扩展」</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87pycryptodome%E7%A4%BA%E4%BE%8B%E6%89%A9%E5%B1%95/</link><pubDate>Thu, 06 May 2021 11:24:03 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87pycryptodome%E7%A4%BA%E4%BE%8B%E6%89%A9%E5%B1%95/</guid><description>PyCryptodome是一个低级密码学原语的独立Python包，它支持Python2.6、Python2.7以及Python3.4或更新的版本，另外还包括PyPy。</description></item><item><title>密码篇・并行密码猜解</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%B9%B6%E8%A1%8C%E5%AF%86%E7%A0%81%E7%8C%9C%E8%A7%A3/</link><pubDate>Sun, 02 May 2021 15:46:01 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%B9%B6%E8%A1%8C%E5%AF%86%E7%A0%81%E7%8C%9C%E8%A7%A3/</guid><description>在上一节中我们实现了简单的ZIP压缩包密码猜解。为了充分利用计算机的性能我们可以同时使用多个CPU核心参与破译，这一节中我们将实现多核心版本或者称为并行版本的密码猜解程序。</description></item><item><title>密码篇・密码猜解</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AF%86%E7%A0%81%E7%8C%9C%E8%A7%A3/</link><pubDate>Sun, 25 Apr 2021 22:00:57 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AF%86%E7%A0%81%E7%8C%9C%E8%A7%A3/</guid><description>几乎所有成熟的商用密码都能经受严格的密码破解分析，一般来说想要对一个加密的数据进行破译最简单的方法就是直接猜测密钥，如果条件允许甚至可以进行大量尝试。为了提高破译效率可以先准备好大量的可能性较高的密钥，然后依次遍历猜测密钥，这种做法有个名词叫“字典爆破”。</description></item><item><title>密码篇・实际应用</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</link><pubDate>Sun, 25 Apr 2021 17:20:41 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</guid><description>之前我们学习了一些密码学的基本概念和原理，接下来我们研究一下密码学技术在实际应用中需要关注的一些问题。</description></item><item><title>密码篇・公开密钥加密</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</link><pubDate>Sun, 18 Apr 2021 18:17:37 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</guid><description>维基百科: 公开密钥密码学（英语：Public-key cryptography）也称非对称式密码学（英语：Asymmetric cryptography）是密码学的一种算法，它需要两个密钥，一个是公开密钥，另一个是私有密钥；公钥用作加密，私钥则用作解密。使用公钥把明文加密后所得的密文，只能用相对应的私钥才能解密并得到原本的明文，最初用来加密的公钥不能用作解密。</description></item><item><title>密码篇・对称密钥加密</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</link><pubDate>Sun, 11 Apr 2021 14:18:23 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86/</guid><description>对称密钥算法（英语：Symmetric-key algorithm）又称为对称加密、私钥加密、共享密钥加密，是密码学中的一类加密算法。这类算法在加密和解密时使用相同的密钥，或是使用两个可以简单地相互推算的密钥。</description></item><item><title>密码篇・密码学简介</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%80%E4%BB%8B/</link><pubDate>Sat, 10 Apr 2021 22:20:15 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%80%E4%BB%8B/</guid><description>密码学（英语：Cryptography）可分为古典密码学和现代密码学。古典密码学主要关注信息的保密书写和传递，以及与其相对应的破译方法。而现代密码学不只关注信息保密问题，还同时涉及信息完整性验证（消息验证码）、信息发布的不可抵赖性（数字签名）、以及在分布式计算中产生的来源于内部和外部的攻击的所有信息安全问题。</description></item><item><title>密码篇・操作环境准备</title><link>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Thu, 08 Apr 2021 23:43:25 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%AF%86%E7%A0%81%E7%AF%87%E6%93%8D%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>Python作为一门流行的脚本语言很早就被Mac OS、主流Linux发行版所预装，一般来说只需要确保自己系统的Python版本不要太旧「建议高于3.5」，如果是Windows用户可以去往Python的官方网站 &lt;a href="https://www.python.org">www.python.org&lt;/a> 进行下载安装。</description></item><item><title>初学篇・猜字游戏「阶段练习」</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E7%8C%9C%E5%AD%97%E6%B8%B8%E6%88%8F%E9%98%B6%E6%AE%B5%E7%BB%83%E4%B9%A0/</link><pubDate>Tue, 06 Apr 2021 13:58:16 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E7%8C%9C%E5%AD%97%E6%B8%B8%E6%88%8F%E9%98%B6%E6%AE%B5%E7%BB%83%E4%B9%A0/</guid><description>猜字游戏涉及的Python基础知识比较丰富且十分容易实现，可以作为《黑客之路・Python篇・初学者篇》的阶段性练习“项目”。</description></item><item><title>初学篇・面向对象&amp;数据结构</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Sun, 04 Apr 2021 19:04:02 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>在Python当中，我们常常使用到的基本数据类型有整型&lt;code>int&lt;/code>、浮点型&lt;code>float&lt;/code>、字符串类型&lt;code>str&lt;/code>……，以及结构类型列表&lt;code>list&lt;/code>、元组&lt;code>tuple&lt;/code>，事实上我们也可以自己来定义类型，这将涉及到Python的面向对象编程。</description></item><item><title>初学篇・函数的定义与调用</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E8%B0%83%E7%94%A8/</link><pubDate>Sun, 04 Apr 2021 15:54:47 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E8%B0%83%E7%94%A8/</guid><description>函数是指可重复使用的程序片段。被用来为某个代码块赋予名字，通过这一特殊的名字可以在程序的任何地方来运行代码块，并可重复任何次数。这就是所谓的调用函数。我们已经使用过了许多内置的函数，例如: &lt;code>print&lt;/code>、&lt;code>len&lt;/code>和&lt;code>range&lt;/code>。</description></item><item><title>初学篇・循环控制语句</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</link><pubDate>Sun, 04 Apr 2021 14:07:06 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</guid><description>在Python中可以通过&lt;code>while&lt;/code>与&lt;code>for&lt;/code>两种循环语句来处理循环问题。</description></item><item><title>初学篇・条件控制语句</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</link><pubDate>Sat, 03 Apr 2021 22:55:25 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</guid><description>&lt;code>if&lt;/code>语句用以根据条件判断如何执行代码: 如果条件为真&lt;code>True&lt;/code>，我们将运行一块语句(称作 if-block 或 if 块)，否则我们将运行另一块语句(称作 else-block 或 else 块)。其中&lt;code>else&lt;/code>从句是可选的。</description></item><item><title>初学篇・逻辑运算&amp;比较运算</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97/</link><pubDate>Sat, 03 Apr 2021 22:05:14 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97/</guid><description>Python当中可以用&lt;code>and&lt;/code>、&lt;code>or&lt;/code>、&lt;code>not&lt;/code>关键字来进行与、或、非逻辑运算，而&lt;code>True&lt;/code>、&lt;code>False&lt;/code>则用于表示布尔值中的真与假；Python当中可以使用&lt;code>&amp;gt;&lt;/code>、&lt;code>&amp;gt;=&lt;/code>、&lt;code>==&lt;/code>、&lt;code>&amp;lt;=&lt;/code>、&lt;code>&amp;lt;&lt;/code>、&lt;code>!=&lt;/code>符号来进行值的比较。</description></item><item><title>初学篇・Python计算器</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87python%E8%AE%A1%E7%AE%97%E5%99%A8/</link><pubDate>Sat, 03 Apr 2021 20:43:12 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87python%E8%AE%A1%E7%AE%97%E5%99%A8/</guid><description>我们可以使用Python来进行一系列的计算器操作，如果足够熟悉Python，那么它将胜过许多高级计算器，甚至某些高级计算器就内置了Python，例如: Casio 卡西欧 FX-9860 GIII 图形计算器。</description></item><item><title>初学篇・第一步“你好世界”</title><link>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E7%AC%AC%E4%B8%80%E6%AD%A5%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/</link><pubDate>Sat, 03 Apr 2021 19:25:30 +0800</pubDate><guid>https://bxtkezhan.github.io/%E5%88%9D%E5%AD%A6%E7%AF%87%E7%AC%AC%E4%B8%80%E6%AD%A5%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/</guid><description>Python是一种广泛使用的直译式、进阶和通用的程式语言。Python支援多种程式设计范式，包括函数式、指令式、结构化、物件导向和反射式程式。它拥有动态型别系统和垃圾回收功能，能够自动管理记忆体使用，并且其本身拥有一个巨大而广泛的标准库。</description></item><item><title>使用BKLexer进行词法分析</title><link>https://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8bklexer%E8%BF%9B%E8%A1%8C%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</link><pubDate>Sat, 13 Mar 2021 22:55:41 +0800</pubDate><guid>https://bxtkezhan.github.io/%E4%BD%BF%E7%94%A8bklexer%E8%BF%9B%E8%A1%8C%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</guid><description>前几天我已经封装好了词法分析器并命名&lt;code>BKLexer&lt;/code>，当前&lt;code>BKLexer&lt;/code>分别支持Go/C++/Python。</description></item><item><title>词法分析器</title><link>https://bxtkezhan.github.io/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/</link><pubDate>Sat, 06 Mar 2021 21:26:02 +0800</pubDate><guid>https://bxtkezhan.github.io/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/</guid><description>维基百科介绍：词法分析是计算机科学中将字符序列转换为标记序列的过程。进行词法分析的程序或者函数叫作词法分析器。️</description></item></channel></rss>